CREATE TABLE users (

  id SERIAL PRIMARY KEY NOT NULL,
  "firstName" VARCHAR(255),
  "lastName" VARCHAR(255),
  email VARCHAR(255) UNIQUE NOT NULL,
  "password" VARCHAR(255) NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "forumValidated" INTEGER NOT NULL DEFAULT 0,
  "matchingValidated" INTEGER NOT NULL DEFAULT 0
);

CREATE TABLE profiles (

  id SERIAL PRIMARY KEY NOT NULL,
  bio TEXT,
  "userId" INTEGER UNIQUE NOT NULL,
  pseudonym VARCHAR(255) UNIQUE NOT NULL,
  gender VARCHAR(255) NOT NULL,
  orientation VARCHAR(255) NOT NULL,
  attractions VARCHAR(255) NOT NULL,
  "matchTypes" VARCHAR(255) NOT NULL,
  "userTags" INTEGER UNIQUE NOT NULL,
  FOREIGN KEY ("userId") REFERENCES users(id),
  FOREIGN KEY ("userTags") REFERENCES tags(id)

);

CREATE TABLE posts (

  id SERIAL PRIMARY KEY NOT NULL,
  "authorId" INTEGER UNIQUE NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  title VARCHAR(256) NOT NULL,
  content TEXT NOT NULL,
  "upVotes" INTEGER UNIQUE NOT NULL DEFAULT 0,
  "downVotes" INTEGER UNIQUE NOT NULL DEFAULT 0,
  "totalVotes" INTEGER UNIQUE NOT NULL DEFAULT 0,
  FOREIGN KEY ("authorId") REFERENCES users(id)

);

CREATE TABLE tags (

  id SERIAL PRIMARY KEY NOT NULL,
  "name" VARCHAR(255) UNIQUE NOT NULL

);

CREATE TABLE tokens (

  id SERIAL PRIMARY KEY NOT NULL,
  "userId" INTEGER UNIQUE NOT NULL,
  "createdAt" TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  token VARCHAR(255) UNIQUE NOT NULL,
  expired INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY ("userId") REFERENCES users(id)

);