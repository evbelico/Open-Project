scalar DateTime

# interface Message {
#   message: String
#   messageCode: Int
# }

type User {
  id: ID!
  email: String!
  password: String!
  birthday: DateTime!
  token: String!
  tokenExpired: Boolean!
<<<<<<< HEAD
=======
  validated: Boolean!
>>>>>>> origin/front-margot
  createdAt: DateTime
  forumValidated: Int
  matchingValidated: Int
  servicesValidated: Int
}

type Profile {
  id: ID!
  bio: String
  userId: User!
  pseudonym: String!
  gender: String!
  orientation: String!
  attractions: [String!]
  platAttractions: [String!]
  matchTypes: [String!]!
  userTags: [Tag!]!
}

type Post {
  id: ID!
  authorId: User!
  createdAt: DateTime
  title: String!
  content: String!
  upVotes: Int!
  downVotes: Int!
  totalVotes: Int!
}

type Tag {
  id: ID!
  name: String!
}

type Token {
  id: ID!
  content: String!
  payloadType: String!
  userId: User
  createdAt: DateTime
  expired: Int
  UserId: Int
}

type Query {
  me: User
  hello: String
  getAllUsers: [User]
  getAllTokens: [Token]
}

type Mutation {
  # signup(data: UserCreateInput!): User!
  testSignup(
    firstName: String
    lastName: String
    email: String!
    password: String!
  ): User!
  register(email: String!, password: String!, birthday: DateTime!): User
<<<<<<< HEAD
=======
  userExists(email: String!): User
  checkRegistrationToken(sentToken: String!): User
>>>>>>> origin/front-margot
  modifierNom(email: String): User
  #   verifySignupToken(token: String!): Message!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String!
  password: String!
  createdAt: DateTime
}
